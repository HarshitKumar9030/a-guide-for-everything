'use client';

import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { ArrowLeft, User, Eye, Share2, Download } from 'lucide-react';
import { useRouter, useParams } from 'next/navigation';
import ReactMarkdown from 'react-markdown';
import { SavedGuide } from '@/lib/guides-db';

export default function SharedGuidePage() {
  const router = useRouter();
  const params = useParams();
  const [guide, setGuide] = useState<SavedGuide | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (params.id) {
      fetchGuide(params.id as string);
    }
  }, [params.id]);

  const fetchGuide = async (id: string) => {
    try {
      const response = await fetch(`/api/guides/${id}`);
      
      if (!response.ok) {
        if (response.status === 404) {
          setError('Guide not found');
        } else if (response.status === 403) {
          setError('This guide is private');
        } else {
          setError('Failed to load guide');
        }
        return;
      }

      const data = await response.json();
      setGuide(data.guide);
    } catch (error) {
      console.error('Error fetching guide:', error);
      setError('Failed to load guide');
    } finally {
      setLoading(false);
    }
  };

  const handleDownload = () => {
    if (!guide) return;
    
    const content = `# ${guide.title}\n\nGenerated by: ${guide.model}\nCreated: ${new Date(guide.createdAt).toLocaleString()}\n\n---\n\n${guide.content}`;
    const blob = new Blob([content], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${guide.title.replace(/[^a-zA-Z0-9]/g, '-').toLowerCase()}.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleShare = async () => {
    if (!guide) return;
    
    try {
      if (typeof navigator !== 'undefined' && 'share' in navigator) {
        await navigator.share({
          title: guide.title,
          text: guide.content.substring(0, 200) + '...',
          url: window.location.href
        });      } else {
        try {
          await (navigator as Navigator).clipboard?.writeText(window.location.href);
        } catch {
          console.log('Clipboard not available');
        }
      }
    } catch (error) {
      console.error('Failed to share:', error);
    }  };

  const cleanMarkdownContent = (content: string) => {
    let cleaned = content.replace(/^#\s+.+$/m, '');
    
    cleaned = cleaned.replace(/##\s*In a Nutshell\s*\n[\s\S]*?(?=\n#|$)/i, '');
    
    cleaned = cleaned.replace(/^\s*\n+/, '').trim();
    
    return cleaned;
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-[#272727] flex items-center justify-center">
        <motion.div
          animate={{ rotate: 360 }}
          transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
          className="w-8 h-8 border-2 border-primary border-t-transparent rounded-full"
        />
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-[#272727] flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-white mb-4">{error}</h1>
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={() => router.push('/')}
            className="flex items-center gap-2 px-6 py-3 bg-primary text-black rounded-xl hover:bg-primary/80 transition-colors mx-auto"
          >
            <ArrowLeft className="w-4 h-4" />
            Go Home
          </motion.button>
        </div>
      </div>
    );
  }

  if (!guide) return null;

  return (
    <div className="min-h-screen bg-[#272727] text-white">
      <motion.header
        initial={{ y: -20, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ duration: 0.6 }}
        className="sticky top-0 z-10 bg-[#272727]/80 backdrop-blur-sm border-b border-white/10"
      >
        <div className="max-w-6xl mx-auto px-4 py-4 flex items-center justify-between">
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={() => router.push('/')}
            className="flex items-center gap-2 px-3 py-2 rounded-lg bg-white/5 hover:bg-white/10 transition-colors"
          >
            <ArrowLeft className="w-4 h-4" />
            <span className="text-sm font-medium">Home</span>
          </motion.button>

          <div className="flex items-center gap-2">
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={handleDownload}
              className="flex items-center gap-2 px-3 py-2 rounded-lg bg-white/5 hover:bg-white/10 transition-colors text-sm"
            >
              <Download className="w-4 h-4" />
              Download
            </motion.button>

            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={handleShare}
              className="flex items-center gap-2 px-4 py-2 rounded-lg bg-primary text-black hover:bg-primary/80 transition-colors text-sm font-medium"
            >
              <Share2 className="w-4 h-4" />
              Share
            </motion.button>
          </div>
        </div>
      </motion.header>

      <main className="max-w-4xl mx-auto px-4 py-8">
        <motion.div
          initial={{ y: 20, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ duration: 0.6, delay: 0.1 }}
          className="mb-8 p-6 bg-[#1E1E1E] rounded-2xl border border-white/10"
        >
          <h1 className="text-3xl font-bold mb-4 text-primary">{guide.title}</h1>
          
          <div className="text-sm text-white/70 space-y-2">
            <div>
              Generated by {guide.model} • Created {new Date(guide.createdAt).toLocaleDateString()} • 
              {guide.tokens && (
                <> {guide.tokens.total} tokens ({guide.tokens.input} in / {guide.tokens.output} out)</>
              )}
            </div>
            
            <div className="flex items-center gap-4">
              <div className="flex items-center gap-1">
                <User className="w-4 h-4" />
                <span>{guide.userEmail.split('@')[0]}</span>
              </div>
              {guide.views !== undefined && (
                <div className="flex items-center gap-1">
                  <Eye className="w-4 h-4" />
                  <span>{guide.views} views</span>
                </div>
              )}
            </div>
          </div>
        </motion.div>

        {guide.nutshell && (
          <motion.div
            initial={{ y: 20, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ duration: 0.6, delay: 0.2 }}
            className="mb-8 p-6 bg-gradient-to-r from-primary/10 to-primary/5 rounded-2xl border border-primary/20"
          >
            <h2 className="text-xl font-bold mb-4 text-primary">In a Nutshell</h2>
            <div className="text-white/90 leading-relaxed">
              <ReactMarkdown>{guide.nutshell}</ReactMarkdown>
            </div>
          </motion.div>
        )}

       <motion.div
          initial={{ y: 20, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ duration: 0.6, delay: 0.3 }}
        >
          <div className="bg-[#1E1E1E] rounded-2xl border border-white/10 p-8">
            <div className="markdown-content text-white">
              <ReactMarkdown>{cleanMarkdownContent(guide.content)}</ReactMarkdown>
            </div>
          </div>
        </motion.div>
      </main>
    </div>
  );
}
