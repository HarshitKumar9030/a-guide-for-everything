'use client';

import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { ArrowLeft, User, Eye, Share2, Download, Calendar, Globe, BookOpen, List } from 'lucide-react';
import { useRouter, useParams } from 'next/navigation';
import ReactMarkdown from 'react-markdown';
import { SavedGuide } from '@/lib/guides-db';
import ErrorModal from '@/components/core/ErrorModal';

const cleanMarkdownContent = (content: string) => {
  let cleaned = content.replace(/^#\s+.+$/m, '');

  cleaned = cleaned.replace(/##\s*In a Nutshell\s*\n[\s\S]*?(?=\n#|$)/i, '');

  cleaned = cleaned.replace(/^\s*\n+/, '').trim();

  return cleaned;
};

const extractHeadings = (content: string) => {
  const cleanedContent = cleanMarkdownContent(content);

  const headingRegex = /^(#{1,6})\s+(.+)$/gm;
  const headings: { id: string; text: string; level: number }[] = [];
  let match;

  while ((match = headingRegex.exec(cleanedContent)) !== null) {
    const level = match[1].length;
    const text = match[2].trim();
    const id = text.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '');

    headings.push({ id, text, level });
  }

  return headings;
};

export default function SharedGuidePage() {
  const router = useRouter();
  const params = useParams();
  const [guide, setGuide] = useState<SavedGuide | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showTOC, setShowTOC] = useState(false);
  const [headings, setHeadings] = useState<{ id: string; text: string; level: number }[]>([]);
  const [userName, setUserName] = useState<string>('');

  const [errorModal, setErrorModal] = useState<{
    isOpen: boolean;
    title: string;
    message: string;
    type?: 'error' | 'success' | 'info' | 'warning';
  }>({
    isOpen: false,
    title: '',
    message: '',
    type: 'error'
  });

  useEffect(() => {
    if (params.id) {
      fetchGuide(params.id as string);
    }
  }, [params.id]);

  useEffect(() => {
    if (guide) {
      const extractedHeadings = extractHeadings(guide.content);
      setHeadings(extractedHeadings);

      // Fetch user's actual name
      fetchUserName(guide.userEmail);
    }
  }, [guide]);

  const fetchUserName = async (email: string) => {
    try {
      const response = await fetch(`/api/user/profile?email=${encodeURIComponent(email)}`);
      if (response.ok) {
        const data = await response.json();
        setUserName(data.name || email.split('@')[0]);
      } else {
        // Fallback to email prefix if API fails
        setUserName(email.split('@')[0]);
      }
    } catch (error) {
      console.error('Error fetching user name:', error);
      // Fallback to email prefix
      setUserName(email.split('@')[0]);
    }
  };

  const scrollToHeading = (id: string) => {
    const element = document.getElementById(id);
    if (element) {
      element.scrollIntoView({ behavior: 'smooth', block: 'start' });
      setShowTOC(false);
    }
  };

  const fetchGuide = async (id: string) => {
    try {
      const response = await fetch(`/api/guides/${id}`);

      if (!response.ok) {
        if (response.status === 404) {
          setError('Guide not found');
        } else if (response.status === 403) {
          setError('This guide is private');
        } else {
          setError('Failed to load guide');
        }
        return;
      }

      const data = await response.json();
      setGuide(data.guide);
    } catch (error) {
      console.error('Error fetching guide:', error);
      setError('Failed to load guide');
    } finally {
      setLoading(false);
    }
  };

  const handleDownload = () => {
    if (!guide) return;

    const content = `# ${guide.title}\n\nGenerated by: ${guide.model}\nCreated: ${new Date(guide.createdAt).toLocaleString()}\n\n---\n\n${guide.content}`;
    const blob = new Blob([content], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${guide.title.replace(/[^a-zA-Z0-9]/g, '-').toLowerCase()}.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }; const handleShare = async () => {
    if (!guide) return;

    try {
      if (typeof navigator !== 'undefined' && 'share' in navigator) {
        await navigator.share({
          title: guide.title,
          text: guide.content.substring(0, 200) + '...',
          url: window.location.href
        });
      } else {
        // Fallback: copy link to clipboard
        if (typeof window !== 'undefined' && window.navigator.clipboard) {
          await window.navigator.clipboard.writeText(window.location.href);
          setErrorModal({
            isOpen: true,
            title: 'Link Copied',
            message: 'Share link has been copied to your clipboard!',
            type: 'success'
          });
        }
      }
    } catch (error) {
      console.error('Failed to share:', error);
      setErrorModal({
        isOpen: true,
        title: 'Share Failed',
        message: 'Failed to share the guide. Please try again.',
        type: 'error'
      });
    }  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-b from-[#141414] to-[#1E1E1E] flex items-center justify-center">
        <div className="text-center">
          <motion.div
            animate={{ rotate: 360 }}
            transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
            className="w-12 h-12 border-2 border-primary border-t-transparent rounded-full mx-auto mb-4"
          />
          <p className="text-white/70 text-lg">Loading guide...</p>
        </div>
      </div>
    );
  }if (error) {
    return (
      <div className="min-h-screen bg-gradient-to-b from-[#141414] to-[#1E1E1E] py-4 sm:py-8 md:py-12 px-4 sm:px-6 lg:px-8 flex justify-center items-center">
        <div className="w-full max-w-2xl bg-[#1E1E1E] rounded-[24px] sm:rounded-[48px] overflow-hidden shadow-xl p-8 sm:p-12 text-center">
          <div className="relative mb-6 sm:mb-8">
            <div className="absolute inset-0 bg-red-500/5 rounded-full blur-3xl w-20 h-20 sm:w-24 sm:h-24 mx-auto"></div>
            <BookOpen className="w-12 h-12 sm:w-16 sm:h-16 text-red-400/50 mx-auto relative" />
          </div>
          <h1 className="text-2xl sm:text-3xl font-bold text-white mb-3 sm:mb-4 break-words">{error}</h1>
          <p className="text-white/60 text-base sm:text-lg mb-6 sm:mb-8 break-words">
            The guide you&apos;re looking for might not exist or is no longer available.
          </p>
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={() => router.push('/')}
            className="flex items-center gap-2 sm:gap-3 px-6 sm:px-8 py-3 sm:py-4 bg-primary text-black rounded-xl sm:rounded-2xl hover:bg-primary/80 transition-colors mx-auto font-semibold text-base sm:text-lg"
          >
            <ArrowLeft className="w-4 h-4 sm:w-5 sm:h-5" />
            Go Home
          </motion.button>
        </div>
      </div>
    );
  }
  if (!guide) return null;  return (
    <div className="min-h-screen bg-gradient-to-b from-[#141414] to-[#1E1E1E] py-4 sm:py-8 md:py-12 px-4 sm:px-6 lg:px-8 flex justify-center">
      <div className="w-full max-w-6xl bg-[#1E1E1E] rounded-[24px] sm:rounded-[48px] lg:rounded-[72px] overflow-hidden shadow-xl">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, ease: "easeOut" }}
          className="p-4 sm:p-6 md:p-8 lg:p-12 xl:p-16"
        >          {/* Header */}
          <div className="mb-8 sm:mb-12">
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => router.push('/')}
              className="flex items-center gap-2 px-3 py-2 rounded-lg bg-white/5 hover:bg-white/10 transition-colors mb-6 sm:mb-8"
            >
              <ArrowLeft className="w-4 h-4" />
              <span className="text-sm font-medium text-white">Back to Home</span>
            </motion.button>

            <div className="flex flex-col lg:flex-row lg:items-start lg:justify-between mb-6 sm:mb-8 gap-6">
              <div className="flex-1">
                <h1 className="text-white font-just-another-hand text-[48px] sm:text-[64px] md:text-[80px] lg:text-[96px] leading-none mb-3 sm:mb-4 break-words">
                  {guide.title}
                </h1>                <div className="flex flex-wrap items-center gap-3 sm:gap-4 text-white/60 text-sm sm:text-base lg:text-lg">
                  <div className="flex items-center gap-2">
                    <User className="w-4 h-4 sm:w-5 sm:h-5" />
                    <span className="truncate max-w-[120px] sm:max-w-none">{userName || guide.userEmail.split('@')[0]}</span>
                  </div>
                  <div className="w-1 h-1 bg-white/30 rounded-full hidden sm:block"></div>
                  <div className="flex items-center gap-2">
                    <Calendar className="w-4 h-4 sm:w-5 sm:h-5" />
                    <span className="whitespace-nowrap">{new Date(guide.createdAt).toLocaleDateString()}</span>
                  </div>
                  {guide.views !== undefined && (
                    <>
                      <div className="w-1 h-1 bg-white/30 rounded-full hidden sm:block"></div>
                      <div className="flex items-center gap-2">
                        <Eye className="w-4 h-4 sm:w-5 sm:h-5" />
                        <span>{guide.views} views</span>
                      </div>
                    </>
                  )}
                </div>
              </div>
              <div className="flex items-center gap-2 sm:gap-3 lg:ml-8 shrink-0">
                {headings.length > 0 && (
                  <motion.button
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                    onClick={() => setShowTOC(true)}
                    className="flex items-center gap-2 px-3 sm:px-4 py-2 sm:py-3 rounded-lg sm:rounded-xl bg-white/5 text-white hover:bg-white/10 transition-colors font-medium text-sm sm:text-base"
                  >
                    <List className="w-4 h-4" />
                    <span className="hidden md:inline">TOC</span>
                  </motion.button>
                )}

                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={handleDownload}
                  className="flex items-center gap-2 px-3 sm:px-4 py-2 sm:py-3 rounded-lg sm:rounded-xl bg-white/10 text-white hover:bg-white/20 transition-colors font-medium text-sm sm:text-base"
                >
                  <Download className="w-4 h-4" />
                  <span className="hidden xs:inline sm:inline">Download</span>
                </motion.button>

                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={handleShare}
                  className="flex items-center gap-2 px-4 sm:px-6 py-2 sm:py-3 rounded-lg sm:rounded-xl bg-primary text-black hover:bg-primary/80 transition-colors font-semibold text-sm sm:text-base"
                >
                  <Share2 className="w-4 h-4" />
                  <span className="hidden xs:inline sm:inline">Share</span>
                </motion.button>
              </div>
            </div>
            <motion.div
              initial={{ y: 20, opacity: 0 }}
              animate={{ y: 0, opacity: 1 }}
              transition={{ duration: 0.6, delay: 0.1 }}
              className="bg-[#2A2A2A] rounded-2xl sm:rounded-3xl p-4 sm:p-6 lg:p-8 border border-white/10 mb-6 sm:mb-8"
            >
              <div className="flex flex-col sm:flex-row sm:items-center gap-3 sm:gap-6 text-xs sm:text-sm text-white/70">
                <div className="flex items-center gap-2">
                  <span className="font-medium text-primary">Model:</span>
                  <span className="text-white">{guide.model}</span>
                </div>

                {guide.tokens && (
                  <>
                    <div className="w-1 h-1 bg-white/30 rounded-full hidden sm:block"></div>
                    <div className="flex items-center gap-2">
                      <span className="font-medium text-primary">Tokens:</span>
                      <span className="text-white">
                        <span className="hidden sm:inline">{guide.tokens.total.toLocaleString()} ({guide.tokens.input.toLocaleString()} in / {guide.tokens.output.toLocaleString()} out)</span>
                        <span className="sm:hidden">{guide.tokens.total.toLocaleString()}</span>
                      </span>
                    </div>
                  </>
                )}

                <div className="w-1 h-1 bg-white/30 rounded-full hidden sm:block"></div>
                <div className="flex items-center gap-2">
                  <Globe className="w-4 h-4 text-green-400" />
                  <span className="text-green-400 font-medium">Public Guide</span>
                </div>
              </div>
            </motion.div>
          </div>
          {guide.nutshell && (
            <motion.div
              initial={{ y: 20, opacity: 0 }}
              animate={{ y: 0, opacity: 1 }}
              transition={{ duration: 0.6, delay: 0.2 }}
              className="relative overflow-hidden rounded-2xl sm:rounded-3xl mb-6 sm:mb-8"
            >
              <div className="absolute inset-0 bg-gradient-to-br from-primary/10 via-primary/5 to-transparent"></div>
              <div className="absolute inset-0 rounded-2xl sm:rounded-3xl border border-primary/30 shadow-[0_0_30px_rgba(27,225,255,0.1)]"></div>

              <div className="relative p-4 sm:p-6 lg:p-8">
                <div className="flex items-center gap-3 mb-4 sm:mb-6">
                  <div className="p-2 sm:p-3 bg-primary/20 rounded-xl border border-primary/30">
                    <BookOpen className="w-5 h-5 sm:w-6 sm:h-6 text-primary" />
                  </div>
                  <div>
                    <h2 className="text-xl sm:text-2xl font-bold text-white">In a Nutshell</h2>
                    <p className="text-primary/80 text-xs sm:text-sm font-medium">Quick overview</p>
                  </div>
                </div>

                <div className="bg-black/20 rounded-xl sm:rounded-2xl p-4 sm:p-6 backdrop-blur-sm border border-white/10">
                  <div className="prose prose-invert prose-sm sm:prose-base lg:prose-lg max-w-none">
                    <ReactMarkdown
                      components={{
                        p: ({ children }) => (
                          <p className="text-white/90 leading-relaxed text-base sm:text-lg mb-3 sm:mb-4 last:mb-0">
                            {children}
                          </p>
                        ),
                        strong: ({ children }) => (
                          <strong className="font-semibold text-white">
                            {children}
                          </strong>
                        ),
                      }}
                    >
                      {guide.nutshell}
                    </ReactMarkdown>
                  </div>
                </div>

                <div className="absolute top-4 right-4 w-24 h-24 sm:w-32 sm:h-32 bg-primary/5 rounded-full blur-3xl"></div>
                <div className="absolute bottom-4 left-4 w-16 h-16 sm:w-24 sm:h-24 bg-primary/10 rounded-full blur-2xl"></div>
              </div>
            </motion.div>
          )}
          <motion.div
            initial={{ y: 20, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ duration: 0.6, delay: 0.3 }}
            className="bg-[#2A2A2A] rounded-2xl sm:rounded-3xl border border-white/10 overflow-hidden"
          >
            <div className="p-4 sm:p-6 lg:p-8 xl:p-12">
              <div className="prose prose-invert prose-sm sm:prose-base lg:prose-lg max-w-none guide-content">
                <ReactMarkdown
                  components={{
                    h1: ({ children }) => {
                      const text = children?.toString() || '';
                      const id = text.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '');
                      return (
                        <h1 id={id} className="text-2xl sm:text-3xl font-bold mb-6 sm:mb-8 text-white border-b border-white/20 pb-3 sm:pb-4 leading-tight break-words">
                          {children}
                        </h1>
                      );
                    },
                    h2: ({ children }) => {
                      const text = children?.toString() || '';
                      const id = text.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '');
                      return (
                        <h2 id={id} className="text-xl sm:text-2xl font-semibold mt-8 sm:mt-12 mb-4 sm:mb-6 text-white leading-tight break-words">
                          {children}
                        </h2>
                      );
                    },
                    h3: ({ children }) => {
                      const text = children?.toString() || '';
                      const id = text.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '');
                      return (
                        <h3 id={id} className="text-lg sm:text-xl font-semibold mt-6 sm:mt-8 mb-3 sm:mb-4 text-white/95 leading-tight break-words">
                          {children}
                        </h3>
                      );
                    },
                    p: ({ children }) => (
                      <p className="text-white/85 mb-4 sm:mb-6 leading-relaxed text-base sm:text-lg break-words">
                        {children}
                      </p>
                    ),
                    ul: ({ children }) => (
                      <ul className="list-none mb-6 sm:mb-8 text-white/85 space-y-3 sm:space-y-4">
                        {children}
                      </ul>
                    ),
                    ol: ({ children }) => (
                      <ol className="list-decimal list-inside mb-6 sm:mb-8 text-white/85 space-y-3 sm:space-y-4 pl-2 sm:pl-4">
                        {children}
                      </ol>
                    ),
                    li: ({ children }) => (
                      <li className="flex items-start gap-2 sm:gap-3 leading-relaxed">
                        <span className="w-1.5 h-1.5 sm:w-2 sm:h-2 bg-primary rounded-full mt-2 sm:mt-3 flex-shrink-0"></span>
                        <span className="flex-1 text-base sm:text-lg break-words">{children}</span>
                      </li>
                    ),
                    code: ({ children }) => (
                      <code className="bg-black/40 px-2 sm:px-3 py-1 sm:py-1.5 rounded text-primary font-mono text-xs sm:text-sm border border-white/10 break-all">
                        {children}
                      </code>
                    ),
                    pre: ({ children }) => (
                      <pre className="bg-black/50 p-3 sm:p-4 lg:p-6 rounded-lg sm:rounded-xl overflow-x-auto mb-6 sm:mb-8 border border-white/10">
                        <code className="text-white/90 font-mono text-xs sm:text-sm leading-relaxed">
                          {children}
                        </code>
                      </pre>
                    ),
                    blockquote: ({ children }) => (
                      <blockquote className="border-l-3 sm:border-l-4 border-primary pl-4 sm:pl-6 py-3 sm:py-4 italic text-white/80 my-6 sm:my-8 bg-primary/5 rounded-r-lg">
                        <div className="text-base sm:text-lg leading-relaxed">{children}</div>
                      </blockquote>
                    ),
                    strong: ({ children }) => (
                      <strong className="font-semibold text-white">
                        {children}
                      </strong>
                    ),
                  }}
                >
                  {cleanMarkdownContent(guide.content)}
                </ReactMarkdown>
              </div>
            </div>
          </motion.div>

          <AnimatePresence>
            {showTOC && (
              <>
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  exit={{ opacity: 0 }}
                  className="fixed inset-0 bg-black/50 z-30"
                  onClick={() => setShowTOC(false)}
                />
                <motion.div
                  initial={{ x: '100%' }}
                  animate={{ x: 0 }}
                  exit={{ x: '100%' }}
                  transition={{ type: 'spring', damping: 30, stiffness: 300 }}
                  className="fixed right-0 top-0 h-full w-full sm:w-96 bg-[#1E1E1E] border-l border-white/10 z-40 overflow-x-hidden"
                  style={{
                    scrollbarWidth: 'thin',
                    scrollbarColor: 'rgba(27, 225, 255, 0.5) rgba(255, 255, 255, 0.1)'
                  }}
                >
                  <style jsx>{`
                    .custom-scrollbar::-webkit-scrollbar {
                      width: 8px;
                    }
                    .custom-scrollbar::-webkit-scrollbar-track {
                      background: rgba(255, 255, 255, 0.05);
                      border-radius: 4px;
                    }
                    .custom-scrollbar::-webkit-scrollbar-thumb {
                      background: linear-gradient(180deg, rgba(27, 225, 255, 0.8) 0%, rgba(27, 225, 255, 0.4) 100%);
                      border-radius: 4px;
                      border: 1px solid rgba(27, 225, 255, 0.2);
                    }
                    .custom-scrollbar::-webkit-scrollbar-thumb:hover {
                      background: linear-gradient(180deg, rgba(27, 225, 255, 1) 0%, rgba(27, 225, 255, 0.6) 100%);
                    }
                  `}</style>

                  <div className="h-full overflow-y-auto overflow-x-hidden custom-scrollbar">
                    <div className="p-6">
                      <div className="flex items-center justify-between mb-6">
                        <div>
                          <h3 className="text-lg font-bold text-white">Table of Contents</h3>
                          <p className="text-primary/80 text-sm">Navigate sections</p>
                        </div>
                        <button
                          onClick={() => setShowTOC(false)}
                          className="w-8 h-8 flex items-center justify-center text-white/60 hover:text-white hover:bg-white/10 rounded-lg transition-all"
                        >
                          ✕
                        </button>
                      </div>

                      <nav className="space-y-1">
                        {headings.map((heading, index) => (
                          <motion.button
                            key={index}
                            whileHover={{ x: 4 }}
                            onClick={() => scrollToHeading(heading.id)}
                            className={`block w-full text-left p-3 rounded-xl hover:bg-gradient-to-r hover:from-primary/10 hover:to-primary/5 transition-all group border border-transparent hover:border-primary/20 ${heading.level === 1 ? 'text-white font-semibold bg-white/5' :
                              heading.level === 2 ? 'text-white/85 ml-4 font-medium' :
                                'text-white/70 ml-8'
                              }`}
                            style={{ fontSize: heading.level === 1 ? '15px' : heading.level === 2 ? '14px' : '13px' }}
                          >
                            <div className="flex items-center gap-2">
                              <div className={`w-1.5 h-1.5 rounded-full transition-all  ${heading.level === 1 ? 'bg-primary' :
                                heading.level === 2 ? 'bg-primary/70' :
                                  'bg-primary/40'
                                }`}></div>
                              <span className="group-hover:text-primary/90 transition-colors">
                                {heading.text}
                              </span>
                            </div>
                          </motion.button>
                        ))}

                        {headings.length === 0 && (
                          <div className="text-center py-8">
                            <p className="text-white/50">No headings found in this guide.</p>
                          </div>
                        )}
                      </nav>
                    </div>
                  </div>
                </motion.div>
              </>
            )}
          </AnimatePresence>

          <ErrorModal
            isOpen={errorModal.isOpen}
            onClose={() => setErrorModal(prev => ({ ...prev, isOpen: false }))}
            title={errorModal.title}
            message={errorModal.message}
            type={errorModal.type}
          />
        </motion.div>
      </div>
    </div>
  );
}
